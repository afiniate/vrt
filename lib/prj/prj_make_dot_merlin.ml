open Core.Std
open Core_extended.Std
open Async.Std

exception Dot_merline_write_error

let active_libs = [
  "async";
  "async";
  "async_extra";
  "async_kernel";
  "async_unix";
  "atd";
  "atdgen";
  "bin_prot";
  "biniou";
  "camlp4";
  "camomile";
  "cmdliner";
  "cohttp";
  "comparelib";
  "conduit";
  "core";
  "core";
  "core_extended";
  "core_kernel";
  "cppo";
  "cryptokit";
  "custom_printf";
  "easy_format";
  "enumerate";
  "fieldslib";
  "herelib";
  "js_of_ocaml";
  "lambda-term";
  "lwt";
  "menhir";
  "ocaml-data-notation";
  "ocamlfind";
  "ocamlify";
  "ocamlmod";
  "ounit";
  "pa_bench";
  "pa_ounit";
  "pa_test";
  "pipebang";
  "re";
  "re2";
  "react";
  "safepass";
  "sexplib";
  "ssl";
  "stringext";
  "textutils";
  "type_conv";
  "typerep";
  "uri";
  "variantslib";
  "xmlm";
  "yojson";
  "zed"]

let source_dirs project_root =
  Common.Dirs.gather_dirs @@ Filename.implode [project_root; "lib"]
  >>= fun app_dirs ->
  Common.Dirs.gather_dirs @@ Filename.implode [project_root; "cmds"]
  >>| fun cmd_dirs ->
  let all_dirs = app_dirs @ cmd_dirs in
  Ok (List.fold ~init:"" ~f:(fun acc dir ->
      acc ^ "S " ^ dir ^ "\n") all_dirs)

let build_dirs project_root =
  Common.Dirs.gather_dirs @@ Filename.implode [project_root; "_build/server"]
  >>| fun bld_dirs ->
  Ok (List.fold ~init:"" ~f:(fun acc dir ->
      acc ^ "B " ^ dir ^ "\n") bld_dirs)

let package_list () =
  (List.fold ~init:"PKG " ~f:(fun acc el -> acc ^ " " ^ el) active_libs) ^ "\n"

let write root contents =
  let path = Filename.implode [root; ".merlin"] in
  try
    Writer.save path ~contents
    >>| fun _ ->
    Ok ()
  with exn ->
    return @@ Result.Error Dot_merline_write_error

let do_dot_merlin () =
  let banner = "## File generated by `vrt prj make-dot-merlin`, manual changes will be overwritten \n" in
  Prj_vagrant.project_root ()
  >>=? fun project_root ->
  build_dirs project_root
  >>=? fun bdirs ->
  source_dirs project_root
  >>=? fun sdirs ->
  write project_root (banner ^ "\n\n"
                      ^ (package_list ())
                      ^ "\n\n"
                      ^ bdirs
                      ^ "\n\n"
                      ^ sdirs)

let monitor_dot_merlin () =
  Common.Cmd.result_guard
    (fun _ -> do_dot_merlin ())

let spec =
  let open Command.Spec in
  empty

let name = "make-dot-merlin"

let command =
  Command.async_basic ~summary:"Generates a valid `.merlin` file in the root of the project directory"
    spec
    monitor_dot_merlin

let desc = (name, command)
